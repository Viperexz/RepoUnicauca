package grsaa;

import grsaa.sop_corba.GestionDispositivosPackage.DatosPlcTu_DTO;
import grsaa.sop_corba.GestionDispositivosPackage.notificacionDTO;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class MenuPrincipal extends JFrame {
    private JButton btnCrear;
    private JButton Eliminar;
    private JTable tbTU;
    private JPanel mainPane;
    private JButton btnConsultar;
    private DatosPlcTu_DTO[] listTU;
    DefaultTableModel modelo = new DefaultTableModel();

    public MenuPrincipal(GestionDispositivosImpl objGrsaaa) {
        setContentPane(mainPane);
        setTitle("Menu Principal");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(1000, 500);
        setLocationRelativeTo(null);
        setVisible(true);

        // Inicializar el modelo de tabla y agregar las columnas en el constructor
        modelo = new DefaultTableModel();
        modelo.addColumn("ID PLC/TU");
        modelo.addColumn("Propietario");
        modelo.addColumn("Tipo de Identificación");
        modelo.addColumn("Número de Identificación");
        modelo.addColumn("Dirección");
        modelo.addColumn("Estrato");
        modelo.addColumn("Fecha de Registro");
        modelo.addColumn("Lectura");
        modelo.addColumn("Consumo");
        tbTU.setModel(modelo); // Asignar el modelo de tabla a la JTable

        btnConsultar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Limpiar la tabla antes de agregar nuevas filas
                modelo.setRowCount(0);
                listTU = objGrsaaa.getGestionTU().listTU;

                if (listTU.length == 0) {
                    JOptionPane.showMessageDialog(
                            null, "No se encontraron TU conectados. ", "Error remoto", JOptionPane.ERROR_MESSAGE);
                } else {
                    // Agregar filas al modelo de tabla
                    for (DatosPlcTu_DTO dato : listTU) {
                        modelo.addRow(new Object[]{
                                dato.id_plctu,
                                dato.propietario,
                                dato.tipoIden,
                                dato.numIden,
                                dato.direccion,
                                dato.estrato,
                                dato.fechaRegistro,
                                dato.lectura,
                                dato.consumo
                        });
                    }
                }


            }
        });
        btnCrear.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener los nuevos datos de la tabla
                ArrayList<DatosPlcTu_DTO> nuevosDatos = new ArrayList<>();

                for (int i = 0; i < modelo.getRowCount(); i++) {
                    String id_plctu = modelo.getValueAt(i, 0).toString();
                    String propietario = modelo.getValueAt(i, 1).toString();
                    String tipoIden = modelo.getValueAt(i, 2).toString();
                    String numIden = modelo.getValueAt(i, 3).toString();
                    String direccion = modelo.getValueAt(i, 4).toString();
                    String estrato = modelo.getValueAt(i, 5).toString();
                    String fechaRegistro = modelo.getValueAt(i, 6).toString();
                    int lectura = Integer.parseInt(modelo.getValueAt(i, 7).toString());
                    int consumo = Integer.parseInt(modelo.getValueAt(i, 8).toString());

                    DatosPlcTu_DTO nuevoDato = new DatosPlcTu_DTO(id_plctu, propietario, tipoIden, numIden, direccion, estrato, fechaRegistro, lectura, consumo);
                    nuevosDatos.add(nuevoDato);
                }
                notificacionDTO tempNot = new notificacionDTO(objGrsaaa.getGestionTU().idPlcmms, nuevosDatos.toArray(new DatosPlcTu_DTO[0]));
                // Actualizar la lista ListTu_DTO con los nuevos datos
                objGrsaaa.setGestionTU(tempNot);
            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Menu administrador");
        mainPane.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPane.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(5, 5), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        mainPane.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(5, 5), null, 0, false));
        Eliminar = new JButton();
        Eliminar.setText("Eliminar");
        mainPane.add(Eliminar, new com.intellij.uiDesigner.core.GridConstraints(5, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Opciones consumo PLC_TU");
        mainPane.add(label2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        mainPane.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        btnCrear = new JButton();
        btnCrear.setText("Actualizar");
        mainPane.add(btnCrear, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnConsultar = new JButton();
        btnConsultar.setText("Consultar");
        mainPane.add(btnConsultar, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPane.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tbTU = new JTable();
        scrollPane1.setViewportView(tbTU);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

}
